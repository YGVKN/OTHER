stages:
    - compile
    - rulez
    - API
    - build
    - deploy

include:
  - local: '.gitlab-ci/templates/.compile.yml'
  - local: '.gitlab-ci/templates/.gitlab_api.yml'
  - local: '.gitlab-ci/templates/.build.yml'
  - local: '.gitlab-ci/templates/.deploy.yml'

variables:
    GOPATH: ${CI_PROJECT_DIR}/.go
    DOCKER_DRIVER: overlay2
    FF_NETWORK_PER_BUILD: "true"
    FF_USE_NEW_SHELL_ESCAPE: "true"
    FF_GITLAB_REGISTRY_HELPER_IMAGE: "true"
    FF_USE_FASTZIP: "true"
    FF_ENABLE_JOB_CLEANUP: "false"  #IF TRUE - Clean dir project
    GET_SOURCES_ATTEMPTS: 3
    RESTORE_CACHE_ATTEMPTS: 3
    ARTIFACT_DOWNLOAD_ATTEMPTS: 3
    EXECUTOR_JOB_SECTION_ATTEMPTS: 3
    TRANSFER_METER_FREQUENCY: "2s"
    ARTIFACT_COMPRESSION_LEVEL: "fast"
    CACHE_COMPRESSION_LEVEL: "fastest"
    WHAT_IS_STAND: "${CI_COMMIT_BRANCH}-${CI_DEFAULT_BRANCH}"
    GIT_DEPTH: "3"


before_script:
  - echo -e "\e[31mRUN ... & Pain ... \e[0m"
  - echo -e  "\e[31m& Checking Stand ... \e[0m"
  - |
    if [[ "$WHAT_IS_STAND" == *"dev"* ]]
    then
      echo "env DEV"
      export WHAT_IS_STAND="dev"
    elif [[ "$WHAT_IS_STAND" == *"ygvkn"* ]]
    then
      echo "YGVKN branch"
    elif [[ "$WHAT_IS_STAND" == *"stage"* ]]
    then
      echo "env STAGE"
      export WHAT_IS_STAND="stage"
    else
      echo "Else void"
    fi
  - env | grep WHAT
  - echo $WHAT_IS_STAND

cache: &shared_cache
  key: shared_cache
  paths:
    - $GOPATH/bin/
  policy: pull-push

job:
  stage: rulez
  script:
    - echo "This job ran on the $CI_COMMIT_BRANCH branch."
  rules:
    - if: $CI_COMMIT_BRANCH == "feature.ygvkn"
      when: manual
    - when: on_success
  allow_failure: true
  tags:
    - server-side

api:
  stage: API
  image: ubuntu
  environment:
    name: $WHAT_IS_STAND
  extends: .gitlab_api
  when: manual
  allow_failure: true
  only:
    - /^feature.+$/
    - /.+ygvkn.+$/
    - "/^${WHAT_IS_STAND}_[0-9]+(?:.[0-9]+)+$/"
  tags:
    - server-side


compile:
  stage: compile
  image: golang:latest
  environment:
    name: $WHAT_IS_STAND
  variables:
    APP_SERVICE: "default"
      #CI_DEBUG_TRACE: "true"
  extends: .compile
  cache:
    key: ${CI_COMMIT_REF_NAME}
    paths:
      - ${CI_PROJECT_DIR}/StateStore
  artifacts:
    name: "state"
    paths:
      - $CI_PROJECT_DIR/StateStore
    expire_in: 8 mins
  timeout: 8  minutes
    #parallel: 3
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  only:
    - /^feature.+$/
    - /.+ygvkn.+$/
    - "/^${WHAT_IS_STAND}_[0-9]+(?:.[0-9]+)+$/"
  tags:
    - server-side


build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  environment:
    name: $WHAT_IS_STAND
  extends: .build
  cache:
    <<: *shared_cache
    paths:
      - $CI_PROJECT_DIR/StateStore
    policy: pull
  only:
    - /^feature.+$/
    - /.+ygvkn.+$/
    - "/^${WHAT_IS_STAND}_[0-9]+(?:.[0-9]+)+$/"
  tags:
    - server-side

deploy:
  stage: deploy
  image: docker:latest
  environment:
    name: $WHAT_IS_STAND
  variables:
    DOCKER_HOST: "unknown"
    DOCKER_TLS_DIR: "$HOME/.docker"
    DOCKER_TLS_VERIFY: 1
    CHECK: "checkout"
  extends: .deploy
    #parallel: 3
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  tags:
    - k8s

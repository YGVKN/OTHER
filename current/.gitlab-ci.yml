stages:
    - API
    - compile
    - build
    - switch_and_deploy

include:
  - local: '.gitlab-ci/templates/.compile.yml'
  - local: '.gitlab-ci/templates/.gitlab_api.yml'
  - local: '.gitlab-ci/templates/.switch.yml'
  - local: '.gitlab-ci/templates/.build.yml'

variables:
    GOPATH: ${CI_PROJECT_DIR}/.go
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch


    DOCKER_DRIVER: overlay2
    FF_NETWORK_PER_BUILD: "true"
    FF_USE_NEW_SHELL_ESCAPE: "true"
    FF_GITLAB_REGISTRY_HELPER_IMAGE: "true"
    FF_USE_FASTZIP: "true"
    FF_ENABLE_JOB_CLEANUP: "false"  #IF TRUE - Clean dir project
    GET_SOURCES_ATTEMPTS: 3
    RESTORE_CACHE_ATTEMPTS: 3
    ARTIFACT_DOWNLOAD_ATTEMPTS: 3
    EXECUTOR_JOB_SECTION_ATTEMPTS: 3
    TRANSFER_METER_FREQUENCY: "2s"
    ARTIFACT_COMPRESSION_LEVEL: "fast"
    CACHE_COMPRESSION_LEVEL: "fastest"
    WHAT_IS_STAND: "${CI_COMMIT_REF_NAME}-${CI_COMMIT_BRANCH}-${CI_DEFAULT_BRANCH}"
    DEPLOY_VARIABLE: "Default"
    DOCKER_TLS_DIR:  "$HOME/.docker"
    DOCKER_TLS_VERIFY: 1
    DOCKER_HOST: "unknown"
    BUILD_DATE: "date +%Y-%m-%d-%H:%M:%S"


before_script:
  - echo -e "\e[31mRUN ... & Pain ...& Detect Stand ...  \e[0m"
  - echo -e "\e[1;35mDefault Values"
  - echo -e "\e[35m$WHAT_IS_STAND | $DOCKER_HOST | $DEPLOY_VARIABLE"
  - echo -e "\e[35m######################################################"
  - |
    if [[ "$WHAT_IS_STAND" == *"dev"* ]]
    then
      echo "env DEV"
      export WHAT_IS_STAND="dev"
    elif [[ "$WHAT_IS_STAND" == *"ygvkn"* ]]
    then
      echo "YGVKN branch"
    elif [[ "$WHAT_IS_STAND" == *"stage"* ]]
    then
      echo "env STAGE"
      export WHAT_IS_STAND="stage"
    elif [[ "$WHAT_IS_STAND" == *"master"* ]]
    then
      echo "env MASTER/MAIN/PROD"
      export WHAT_IS_STAND="prod"
    else
      echo -e "\e[5mElse returns $WHAT_IS_STAND"
    fi
  - env | grep WHAT
  - echo -e "\e[1;35m$WHAT_IS_STAND"
  - echo -e "\e[35m######################################################"

cache: &shared_cache
  key: shared_cache
  paths:
    - $GOPATH/bin/
      #untracked: true
  policy: pull-push


api:
  stage: API
  extends: .gitlab_api


compile:
  stage: compile
  image: golang:latest
  variables:
    APP_SERVICE: "Default"
      #CI_DEBUG_TRACE: "true"
  extends: .compile
  cache:
    key: ${CI_COMMIT_REF_NAME}
    paths:
      - ${CI_PROJECT_DIR}/StateStore
    policy: pull
  artifacts:
    name: "state"
    paths:
      - $CI_PROJECT_DIR/StateStore
    expire_in: 8 mins
      #expire_in: 8 hour
  timeout: 4  minutes
    #parallel: 3
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  only:
    - /^feature.+$/
    - /.+ygvkn.+$/
    - "/^${WHAT_IS_STAND}_[0-9]+(?:.[0-9]+)+$/"
  tags:
    - server-side


build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  needs:
    - job: compile
      artifacts: true
  extends: .build
  cache:
    <<: *shared_cache
    paths:
      - $CI_PROJECT_DIR/StateStore
    policy: pull
  timeout: 8 minutes
  only:
    - /^feature.+$/
    - /.+ygvkn.+$/
    - "/^${WHAT_IS_STAND}_[0-9]+(?:.[0-9]+)+$/"
      #when: manual
  tags:
    - server-side

#DEPLOY#
switch_and_deploy:
  stage: switch_and_deploy
  image: docker:latest
  services:
    - docker:dind
  variables:
    CHECK: "check here..."
  rules:
    - if: $WHAT_IS_STAND == "dev"    || (($CI_COMMIT_REF_NAME  =~ /^DEV.*/    || $CI_COMMIT_BRANCH =~ /^feature.*/ ))
      variables:
        DEPLOY_VARIABLE: "DEPLOY_TO_DEV"
    - if: $WHAT_IS_STAND == "stage"  || (($CI_COMMIT_REF_NAME  =~ /^stage.*/  || $CI_COMMIT_BRANCH =~ /^stage.*/ ))
      variables:
        DEPLOY_VARIABLE: "DEPLOY_TO_STAGE"
    - if: $WHAT_IS_STAND == "prod"   || (($CI_COMMIT_REF_NAME  =~ /^master.*/ || $CI_COMMIT_BRANCH =~ /^master.*/ ))
      variables:
        DEPLOY_VARIABLE: "DEPLOY_TO_PROD"
  extends: .switch
  allow_failure: true
  cache:
    <<: *shared_cache
    paths:
      - $CI_PROJECT_DIR/StateStore
    policy: pull
  after_script:
    - echo -e "\e[0;35m$CHECK"
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  tags:
    - k8s
